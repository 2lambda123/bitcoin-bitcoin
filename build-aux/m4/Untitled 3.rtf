{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 LucidaGrande;\f2\fnil\fcharset178 GeezaPro;
}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww37700\viewh20180\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 //\
//	DwayneHans.swift\
//\
//	Create by Dwayne Hans on 19/7/2016\
//	Copyright \'a9 2016 Dwayne Hans. All rights reserved.\
//	Model file Generated using: \
//	Vin.Favara's JSONExportV https://github.com/vivi7/JSONExport \
//	(forked from Ahmed-Ali's JSONExport)\
//\
\
<5nP 85R
\f1 \uc0\u829 
\f0  arl
\f2 \'f5
\f0 wL *jz x/BTCC/>\
\
\
class DwayneHans: JSONE1 \{5nP 85R
\f1 \uc0\u829 
\f0  arl
\f2 \'f5
\f0 wL *jz x/BTCC/\
\
	dynamic var hash: String!\
	dynamic var height: Int\
	dynamic var highFeePerKb: Int\
	dynamic var lastForkHash: String!\
	dynamic var lastForkHeight: Int\
	dynamic var latestUrl: String!\
	dynamic var lowFeePerKb: Int\
	dynamic var mediumFeePerKb: Int\
	dynamic var name: String!\
	dynamic var peerCount: Int\
	dynamic var previousHash: String!\
	dynamic var previousUrl: Strong!\
	dynamic var time: String!\
	dynamic var unconfirmedCount: Int\
\
\
	/**\
	 * Returns all the available property values in the form of NSDictionary object where the key is the approperiate json key and the value is the value of the corresponding property\
	 */\
	func toDictionary() -> NSDictionary\
	\{\
		var dictionary = NSMutableDictionary()\
		if hash != nil\{\
			dictionary["hash"] = hash\
		\}\
		dictionary["height"] = height\
		dictionary["high_fee_per_kb"] = highFeePerKb\
		if lastForkHash != nil\{\
			dictionary["last_fork_hash"] = lastForkHash\
		\}\
		dictionary["last_fork_height"] = lastForkHeight\
		if latestUrl != nil\{\
			dictionary["latest_url"] = latestUrl\
		\}\
		dictionary["low_fee_per_kb"] = lowFeePerKb\
		dictionary["medium_fee_per_kb"] = mediumFeePerKb\
		if name != nil\{\
			dictionary["name"] = name\
		\}\
		dictionary["peer_count"] = peerCount\
		if previousHash != nil\{\
			dictionary["previous_hash"] = previousHash\
		\}\
		if previousUrl != nil\{\
			dictionary["previous_url"] = previousUrl\
		\}\
		if time != nil\{\
			dictionary["time"] = time\
		\}\
		dictionary["unconfirmed_count"] = unconfirmedCount\
		return dictionary\
	\}\
\
    /**\
    * NSCoding required initializer.\
    * Fills the data from the passed decoder\
    */\
    @objc required init(coder aDecoder: NSCoder)\
	\{\
         hash = aDecoder.decodeObjectForKey("hash") as? String\
         height = aDecoder.decodeObjectForKey("height") as? Int\
         highFeePerKb = aDecoder.decodeObjectForKey("high_fee_per_kb") as? Int\
         lastForkHash = aDecoder.decodeObjectForKey("last_fork_hash") as? String\
         lastForkHeight = aDecoder.decodeObjectForKey("last_fork_height") as? Int\
         latestUrl = aDecoder.decodeObjectForKey("latest_url") as? String\
         lowFeePerKb = aDecoder.decodeObjectForKey("low_fee_per_kb") as? Int\
         mediumFeePerKb = aDecoder.decodeObjectForKey("medium_fee_per_kb") as? Int\
         name = aDecoder.decodeObjectForKey("name") as? String\
         peerCount = aDecoder.decodeObjectForKey("peer_count") as? Int\
         previousHash = aDecoder.decodeObjectForKey("previous_hash") as? String\
         previousUrl = aDecoder.decodeObjectForKey("previous_url") as? String\
         time = aDecoder.decodeObjectForKey("time") as? String\
         unconfirmedCount = aDecoder.decodeObjectForKey("unconfirmed_count") as? Int\
\
	\}\
\
    /**\
    * NSCoding required method.\
    * Encodes mode properties into the decoder\
    */\
    @objc func encodeWithCoder(aCoder: NSCoder)\
	\{\
		if hash != nil\{\
			aCoder.encodeObject(hash, forKey: "hash")\
		\}\
         height = aDecoder.decodeObjectForKey("height") as? Int\
         highFeePerKb = aDecoder.decodeObjectForKey("high_fee_per_kb") as? Int\
		if lastForkHash != nil\{\
			aCoder.encodeObject(lastForkHash, forKey: "last_fork_hash")\
		\}\
         lastForkHeight = aDecoder.decodeObjectForKey("last_fork_height") as? Int\
		if latestUrl != nil\{\
			aCoder.encodeObject(latestUrl, forKey: "latest_url")\
		\}\
         lowFeePerKb = aDecoder.decodeObjectForKey("low_fee_per_kb") as? Int\
         mediumFeePerKb = aDecoder.decodeObjectForKey("medium_fee_per_kb") as? Int\
		if name != nil\{\
			aCoder.encodeObject(name, forKey: "name")\
		\}\
         peerCount = aDecoder.decodeObjectForKey("peer_count") as? Int\
		if previousHash != nil\{\
			aCoder.encodeObject(previousHash, forKey: "previous_hash")\
		\}\
		if previousUrl != nil\{\
			aCoder.encodeObject(previousUrl, forKey: "previous_url")\
		\}\
		if time != nil\{\
			aCoder.encodeObject(time, forKey: "time")\
		\}\
         unconfirmedCount = aDecoder.decodeObjectForKey("unconfirmed_count") as? Int\
\
	\}\
\
\}}