 <.pending-1681423389-1680818589400>:ksa.saudiarabic.sa@gmail.com:552 5.7.0 This message was blocked because its content presents a potential security issue. Please visit https://support.google.com/mail/?p=BlockedMessage to review our message content and attachment content guidelines. jg10-20020a17090326ca00b0019aa8c51c4dsor230076plb.162 - gsmt
<login>:ksa.saudiarabic.sa@gmail.com:
Platform
Android Studio

Google Play

Jetpack

Kotlin

Docs

Overview

Guides

UI Guide

Reference

Samples

Design & Quality

Games

Android Studio

Developer guides

App basics

Devices

App architecture

User interfaces

Core topics

App compatibility

Interact with other apps

Intents and intent filters

Audio and video

Services

Background tasks

Alarms

Permissions

App data and files

About app data and files

About storage

Save to app-specific storage

Save to shared storage

Manage all files on a storage device

Save key-value data

Save data in a local database

Storage use cases and best practices

Sharing simple data

Sharing files

Sharing files using NFC

Printing files

Content providers

App install location

User data and identity

User location

Camera

Sensors

Connectivity

Renderscript

Android app bundles

Google Play

Google Assistant

SDK Extensions

Games

Health and fitness apps

Best practices

Android Developers
Docs
Guides
>:ksa.saudiarabic.sa@gmail.com:
Manage all files on a storage device
Request All files access
Operations that MANAGE_EXTERNAL_STORAGE allows
Invoke another app's storage management activity
Enable MANAGE_EXTERNAL_STORAGE for testing
Google Play notice
The majority of apps that require shared storage access can follow the best practices for sharing media files and sharing non-media files. However, some apps have a core use case that requires broad access of files on a device, but cannot do so efficiently using the privacy-friendly storage best practices. Android provides a special app access called All files access for these situations.

For example, an anti-virus app's primary use case might require regular scanning of many files across different directories. If this scanning requires repeated user interactions to select directories using the system file picker, it may provide a poor user experience. Other use cases—such as file manager apps, backup and restore apps, and document management apps—may require similar considerations.

Request All files access

An app can request All files access from the user by doing the following:

Declare the MANAGE_EXTERNAL_STORAGE permission in the manifest.

Use the ACTION_MANAGE_ALL_FILES_ACCESS_PERMISSION intent action to direct users to a system settings page where they can enable the following option for your app: Allow access to manage all files.

To determine whether your app has been granted the MANAGE_EXTERNAL_STORAGE permission, call Environment.isExternalStorageManager().

Operations that MANAGE_EXTERNAL_STORAGE allows

The MANAGE_EXTERNAL_STORAGE permission grants the following:

Read and write access to all files within shared storage.

Note: The /sdcard/Android/media⁠ directory is part of shared storage.

Access to the contents of the MediaStore.Files table.

Access to the root directory of both the USB on-the-go (OTG) drive and the SD card.

Write access to all internal storage directories⁠, except for /Android/data/, /sdcard/Android, and most subdirectories of /sdcard/Android. This write access includes direct file path access.

Apps that are granted this permission still cannot access the app-specific directories that belong to other apps because these directories appear as subdirectories of Android/data/ on a storage volume.

When an app has the MANAGE_EXTERNAL_STORAGE permission, it can access these additional files and directories using either the MediaStore API or direct file paths. When you use the Storage Access Framework, however, you can only access a file or directory if you could do so without having the MANAGE_EXTERNAL_STORAGE permission.

Invoke another app's storage management activity

On Android 12 (API level 31) and higher, apps that have both the MANAGE_EXTERNAL_STORAGE permission and the QUERY_ALL_PACKAGES permission—such as file management apps—can use the getManageSpaceActivityIntent() to send users to another app's custom space management activity.

The getManageSpaceActivityIntent() method takes in a package name and a request code, and it returns one of the following:

A PendingIntent, if the app with the specified package name has defined a custom "manage space" activity. The file management app that called the getManageSpaceActivityIntent() method can then invoke the returned intent to send users to the custom activity.

null, if the app with the specified package name doesn't define a "manage space" activity.

Enable MANAGE_EXTERNAL_STORAGE for testing

To explore how the MANAGE_EXTERNAL_STORAGE permission affects your app, you can enable the permission for testing purposes. To do so, run the following 
