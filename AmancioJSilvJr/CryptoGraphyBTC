 
/ * Copiado do repositório principal da TurtleCoin em https://github.com/TurtleCoin/TurtleCoin * /

const  { promisify }  =  require ( 'util' ) ;
const  childProcess  =  require ( 'child_process' ) ;
const  fs  =  require ( 'fs' ) ;

const  access  =  promisify ( fs . access ) ;
const  readdir  =  promisify ( fs . readdir ) ;
const  stat  =  promisify ( fs . stat ) ;
const  exec  =  promisify ( childProcess . exec ) ;

/ * Os diretórios para executar nossa formatação, recursivamente * /
const  directoryToFormat  =  [ 'src' ] ;

/ * Tipos de arquivos para executar o formatador * /
const  fileTypes  =  [ '.h' ,  '.cpp' ,  '.c' ] ;

/ * O nome do binário de formato clang. Em algumas distros, isso tem a versão
   anexado. * /
const  binaryName  =  'formato-clang' ;

( assíncrono  ( )  =>  {
     sucesso  const =  espera  main ( ) ;

    if  ( sucesso )  {
        console . log ( '\ nFormatação completa.' ) ;
    }  else  {
        console . log ( '\ nFormatação abortada.' ) ;
    }
} ) ( ) ;
<? xml version = " 1.0 " encoding = " utf-8 " ?>
< Project  xmlns = " http://schemas.microsoft.com/developer/msbuild/2003 " >

  < PropertyGroup  Label = " QtGlobals " >
    < QtBaseDir > C: \ Qt5.12.10_x64_static_vs2019_1694 </ QtBaseDir >
    < QtPluginsLibraryDir > $ (QtBaseDir) \ plugins </ QtPluginsLibraryDir >
    < QtLibraryDir > $ (QtBaseDir) \ lib </ QtLibraryDir >
    < QtIncludeDir > $ (QtBaseDir) \ include </ QtIncludeDir >
    < QtIncludes > $ (QtIncludeDir); $ (QtIncludeDir) \ QtNetwork; $ (QtIncludeDir) \ QtCore; $ (QtIncludeDir) \ QtWidgets; $ (QtIncludeDir) \ QtGui; </ QtIncludes >
    < GeneratedFilesOutDir >. \ QtGeneratedFiles \ qt </ GeneratedFilesOutDir >
    < QtToolsDir > $ (QtBaseDir) \ bin </ QtToolsDir >
    < QtReleaseLibraries > $ (QtPluginsLibraryDir) \ plataformas \ qminimal.lib; $ (QtPluginsLibraryDir) \ plataformas \ qwindows.lib; $ (QtLibraryDir) \ Qt5WindowsUIAutomationSupport.lib; $ (QtLibraryDir) \ qtibreetype) lib; $ (QtLibraryDir) \ qtlibpng.lib; $ (QtLibraryDir) \ qtpcre2.lib; $ (QtLibraryDir) \ Qt5AccessibilitySupport.lib; $ (QtLibraryDir) \ Qt5Core.libDir; $ (QtLibraryDir) \ Qt5Conurrent ) \ Qt5EventDispatcherSupport.lib; $ (QtLibraryDir) \ Qt5FontDatabaseSupport.lib; $ (QtLibraryDir) \ Qt5Gui.lib; $ (QtLibraryDir) \ Qt5Network.lib; $ (Qt5FontDatabaseSupport.lib) $ (QtLibraryDir) \ Qt5Gui.lib; $ (QtLibraryDir) \ Qt5Network.lib; $ (QtLibraryDir) \ Qt5PlatformSupport. ; $ (QtLibraryDir) \ Qt5Widgets.lib; $ (QtLibraryDir) \ Qt5WinExtras.lib; $ (QtLibraryDir) \ qtmain.lib; Wtsapi32.lib; userenv.lib; netapi32.lib; imm32.lib; Dwmapi.lib; version. lib; winmm.lib; UxTheme.lib </Bibliotecas QtRelease >
    < QtDebugLibraries > $ (QtPluginsLibraryDir) \ plataformas \ qwindowsd.lib; $ (QtPluginsLibraryDir) \ plataformas \ qminimald.lib; $ (QtLibraryDir) \ * d.lib; Wtsapi32.lib; crypt32.lib; userenv.lib; netapi32.lib; ; imm32.lib; Dwmapi.lib; version.lib; winmm.lib; UxTheme.lib </ QtDebugLibraries >
  </ PropertyGroup >

 função  assíncrona main  ( )  {
    / * Verifique se estamos na pasta certa e se os diretórios existem * /
    for  ( const  diretório  de  diretóriosToFormat )  {
        tente  {
            aguardar  acesso ( diretório ) ;
        }  catch  ( errar )  {
            console . log ( `Falha ao encontrar o diretório $ { diretório } , provavelmente na pasta errada` ) ;
            console . log ( 'Certifique-se de executar a partir da pasta raiz, como: node scripts / format.js' ) ;
            return  false ;
        }
    }

    deixe  filePaths  =  [ ] ;

    / * Reúna os arquivos * /
    for  ( const  diretório  de  diretóriosToFormat )  {
         arquivos  const =  espera  getFiles ( diretório ) ;
        filePaths  =  filePaths . concat ( arquivos ) ;
    }

    / * Filtrar arquivos não codificados * /
    filePaths  =  filePaths . filtro ( ( arquivo )  =>  {
        return  fileTypes . algum ( ( extensão )  =>  arquivo . termina com ( extensão ) ) ;
    } ) ;

    console . log ( arquivos `encontrados $ { filePaths . length } para formatar!` ) ;

    / * Formate cada arquivo * /
    for  ( arquivo const  de filePaths ) {   
        aguardar  formatFile ( arquivo ) ;
    }

    return  true ;
}

 getFiles função  assíncrona ( diretório ) {  
    const  directoryContents  =  Await  readdir ( directório ) ;

    deixe  allFiles  =  [ ] ;

    for  ( arquivo const  de directoryContents ) {   
        const  fullPath  =  diretório  +  '/'  +  arquivo ;

        const  fileStats  =  Await  estatística ( fullPath ) ;

        / * Este é um diretório, vamos recursar * /
        if  ( fileStats . isDirectory ( ) )  {
            const  moreFiles  =  Await  getfiles ( fullPath ) ;
            allFiles  =  allFiles . concat ( moreFiles ) ;
        }  else  {
            allFiles . push ( fullPath ) ;
        }
    }

    return  allFiles ;
}

 função  assíncrona formatFile  ( filePath )  {
    tente  {
        console . log ( `Formatando $ { filePath } ` ) ;

        esperar  exec ( ` $ { binaryName } -i $ { filePath } ` ) ;
    }  catch  ( errar )  {
        console . log ( `Erro de formatação $ { filePath } : $ { err } ` ) ;
    }
}

trigger:
  branches:
    include:
    - master
variables:
- name: solution
  value: '**/*.sln'
- name: buildPlatform
  value: 'Any CPU'
- name: buildConfiguration
  value: 'Release'
stages:
- stage: __default
  jobs:
  - job: Job
    pool:
      vmImage: 'windows-latest'
    steps:
    - task: NuGetToolInstaller@1
    - task: NuGetCommand@2
      inputs:
        restoreSolution: '$(solution)'
    - task: VSBuild@1
      inputs:
        solution: '$(solution)'
        msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:PackageLocation="$(build.artifactStagingDirectory)"'
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'
    - task: VSTest@2
      inputs:
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration


trigger:
  branches:
    include:
    - master
variables:
- name: buildConfiguration
  value: 'Release'
- name: outputDirectory
  value: '$(build.binariesDirectory)/$(buildConfiguration)'
stages:
- stage: __default
  jobs:
  - job: Job
    pool:
      vmImage: 'macos-latest'
    steps:
    - task: NuGetToolInstaller@1
    - task: NuGetCommand@2
      inputs:
        restoreSolution: '**/*.sln'
    - task: XamarinAndroid@1
      inputs:
        projectFile: '**/*droid*.csproj'
        outputDirectory: '$(outputDirectory)'
        configuration: '$(buildConfiguration
2021-01-29 16:24:06 UTC Roll 000-499 to win 2 times your stake of 1 token (50% win chance) 
You rolled 26 so you won 2 tokens Client
seed 1b08b782 Server seed 1480c1003409b86810c64e8fc565a970 Server seed hash f0eaa47b858dbf8e543102edea22a554003c8203995c99e79bdfdcfab9704d9c 2021-01-29 16:24:05 UTC Roll 000-499 to win 2 times your stake of 
1 token (50% win chance) You rolled 168 so you won 2 tokens Client seed 5de92f4d Server seed f0089d8329291ecaed4ff0af7eaf455a Server seed hash 82bc4919731f9ed282a802326f7d11a75399f08d6b24acdee5eecef75f04a956 2021-01-29 16:24:05 UTC Roll 000-499 to win 2 times your stake of 
1 token (50% win chance) You rolled 116 so you won 2 tokens Client seed da0f7ff3 Server seed f7760a888a8e59605818fac719b113f4 Server seed hash c4d80ade8461b2ab605cf022b39be33b22dca8f431bf229d3de1af90e1cc2b9a 2021-01-29 16:24:04 UTC Roll 000-499 to win 2 times your
stake of 1 token (50% win chance) You rolled 701 so you did not win Client seed b088acf2 Server seed 042895a82b5168ac3b00eff0b4a1031b Server seed hash ff760b96e64137d0c43aab15b6372fa6081812c442ef0801ea792ff602e3e31d 2021-01-29 16:24:04 UTC Roll 000-499 to win 
2 times your stake of 1 token (50% win chance) 
You rolled 968 so you did not win Client seed d96fb53e Server seed b5d063a89a446ab9eaa8842e1bcd29de Server seed hash c99be15ee350dc9599807ac25a981e33990f7a3e03df63b6e540f61253dcbe76 
2021-01-29 16:24:03 UTC Roll 000-499 to win 2 times your stake of 1 token (50% win chance) You rolled 384 so you won 2 tokens Client seed 11a50d45 Server seed 677c4d365c9910d0f509ded08ab01e05 Server seed hash e0838e7fdf84e3bdcb20ad0d3581fd0651b0fb6a256757a17831a9ea80425836 
2021-01-29 16:24:02 UTC 

Roll 000-499 to win 2 times your stake of 1 token (50% win chance) You rolled 105 so you won 2 tokens Client seed ce947dc1 Server seed 09391dbf75905f1eb4756fffb3003245 Server 
seed hash 99224a9ae86a294ff51ec2849f341b9f9e7a17b2e1bb4a7283579eaaf5ed086c 2021-01-29 16:24:01 UTC Roll 000-499 to win 2 times your stake of 1 token (50% win chance) You rolled 699 so you did not win Client seed a805585d Server seed 
e4172d4fc120deea5546b233abf7fad3 
Server seed hash d9e8e46c79b69aeab73b455b69bfc8b026b6f4d5d413946848e7d31d782f2967 2021-01-29 16:24:00 UTC Roll 000-499 to win 2 times your stake of 1 token (50% win chance) You rolled 51 so you won 2 tokensClient seed 67fa2158 Server seed 1af2a4b2c08f2132756cf4789ecd34b3 Server seed hash 8e096ff879bd0e2fca9ceda9afccd06093459f3077d13e6c3021a007bb6cfde9 2021-01-29 16:23:59 UTC Roll 000-499 to win
2 times your stake of 1 token (50% win chance) You rolled 737 so you did not win
Client seed ae29d1e3 Server seed 60ed5ce28bb78f366bead03e2690553e Server seed hash
13d77242c5abc82c40fb067712bad8d47cba67b06f23d096930bc4e34bf9cba6
trigger:
  branches:
    include:
    - master
variables:
- name: buildConfiguration
  value: 'Release'
- name: outputDirectory
  value: '$(build.binariesDirectory)/$(buildConfiguration)'
stages:
- stage: __default
  jobs:
  - job: Job
    pool:
      vmImage: 'macos-latest'
    steps:
    - task: NuGetToolInstaller@1
    - task: NuGetCommand@2
      inputs:
        restoreSolution: '**/*.sln'
    - task: XamarinAndroid@1
      inputs:
        projectFile: '**/*droid*.csproj'
        outputDirectory: '$(outputDirectory)'
        configuration: '$(buildConfiguration
