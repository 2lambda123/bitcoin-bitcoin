---
name: "bitcoin-core-osx-22"
enable_cache: true
distro: "ubuntu"
suites:
- "bionic"
architectures:
- "amd64"
packages:
- "ca-certificates"
- "curl"
- "g++"
- "git"
- "pkg-config"
- "autoconf"
- "librsvg2-bin"
- "libtiff-tools"
- "libtool"
- "automake"
- "faketime"
- "bsdmainutils"
- "cmake"
- "imagemagick"
- "libcap-dev"
- "libz-dev"
- "libbz2-dev"
- "python3"
- "python3-dev"
- "python3-setuptools"
- "fonts-tuffy"
- "xorriso"
remotes:
- "url": "https://github.com/bitcoin/bitcoin.git"
  "dir": "bitcoin"
files:
- "Xcode-11.3.1-11C505-extracted-SDK-with-libcxx-headers.tar.gz"
script: |
  set -e -o pipefail

  WRAP_DIR=$HOME/wrapped
  HOSTS="x86_64-apple-darwin18"
  CONFIGFLAGS="--enable-reduce-exports --disable-bench --disable-gui-tests XORRISOFS=${WRAP_DIR}/xorrisofs DMG=${WRAP_DIR}/dmg"
  FAKETIME_HOST_PROGS=""
  FAKETIME_PROGS="ar ranlib date dmg xorrisofs"

  export QT_RCC_TEST=1
  export QT_RCC_SOURCE_DATE_OVERRIDE=1
  export TZ="UTC"
  export BUILD_DIR="$PWD"
  mkdir -p ${WRAP_DIR}
  if test -n "$GBUILD_CACHE_ENABLED"; then
    export SOURCES_PATH=${GBUILD_COMMON_CACHE}
    export BASE_CACHE=${GBUILD_PACKAGE_CACHE}
    mkdir -p ${BASE_CACHE} ${SOURCES_PATH}
  fi

  export ZERO_AR_DATE=1

  # Use $LIB in LD_PRELOAD to avoid hardcoding the dir (See `man ld.so`)
  function create_global_faketime_wrappers {
  for prog in ${FAKETIME_PROGS}; do
    echo '#!/usr/bin/env bash' > ${WRAP_DIR}/${prog}
    echo "REAL=\`which -a ${prog} | grep -v ${WRAP_DIR}/${prog} | head -1\`" >> ${WRAP_DIR}/${prog}
    echo "export LD_PRELOAD='/usr/\$LIB/faketime/libfaketime.so.1'" >> ${WRAP_DIR}/${prog}
    echo "export FAKETIME=\"$1\"" >> ${WRAP_DIR}/${prog}
    echo "\$REAL \$@" >> $WRAP_DIR/${prog}
    chmod +x ${WRAP_DIR}/${prog}
  done
  }

  function create_per-host_faketime_wrappers {
  for i in $HOSTS; do
    for prog in ${FAKETIME_HOST_PROGS}; do
        echo '#!/usr/bin/env bash' > ${WRAP_DIR}/${i}-${prog}
        echo "REAL=\`which -a ${i}-${prog} | grep -v ${WRAP_DIR}/${i}-${prog} | head -1\`" >> ${WRAP_DIR}/${i}-${prog}
        echo "export LD_PRELOAD='/usr/\$LIB/faketime/libfaketime.so.1'" >> ${WRAP_DIR}/${i}-${prog}
        echo "export FAKETIME=\"$1\"" >> ${WRAP_DIR}/${i}-${prog}
        echo "\$REAL \$@" >> $WRAP_DIR/${i}-${prog}
        chmod +x ${WRAP_DIR}/${i}-${prog}
    done
  done
  }

  # Faketime for depends so intermediate results are comparable
  export PATH_orig=${PATH}
  create_global_faketime_wrappers "2000-01-01 12:00:00"
  create_per-host_faketime_wrappers "2000-01-01 12:00:00"
  export PATH=${WRAP_DIR}:${PATH}

  cd bitcoin
  BASEPREFIX="${PWD}/depends"

  mkdir -p ${BASEPREFIX}/SDKs
  tar -C ${BASEPREFIX}/SDKs -xf ${BUILD_DIR}/Xcode-11.3.1-11C505-extracted-SDK-with-libcxx-headers.tar.gz

  # Build dependencies for each host
  for i in $HOSTS; do
    make ${MAKEOPTS} -C ${BASEPREFIX} HOST="${i}"
  done

  # Faketime for binaries
  export PATH=${PATH_orig}
  create_global_faketime_wrappers "${REFERENCE_DATETIME}"
  create_per-host_faketime_wrappers "${REFERENCE_DATETIME}"
  export PATH=${WRAP_DIR}:${PATH}

  # Define DISTNAME variable.
  # shellcheck source=contrib/gitian-descriptors/assign_DISTNAME
  source contrib/gitian-descriptors/assign_DISTNAME

  GIT_ARCHIVE="${OUTDIR}/src/${DISTNAME}.tar.gz"

  # Create the source tarball
  mkdir -p "$(dirname "$GIT_ARCHIVE")"
  git archive --prefix="${DISTNAME}/" --output="$GIT_ARCHIVE" HEAD

  ORIGPATH="$PATH"
  CODESIGN_ALLOCATE="${BASEPREFIX}/${i}/native/bin/${i}-codesign_allocate"
  PAGESTUFF="${BASEPREFIX}/${i}/native/bin/${i}-pagestuff"
  # Extract the git archive into a dir for each host and build
  for i in ${HOSTS}; do
    export PATH=${BASEPREFIX}/${i}/native/bin:${ORIGPATH}
    mkdir -p distsrc-${i}
    cd distsrc-${i}
    INSTALLPATH="${PWD}/installed/${DISTNAME}"
    mkdir -p ${INSTALLPATH}
    tar --strip-components=1 -xf "${GIT_ARCHIVE}"

    ./autogen.sh
    CONFIG_SITE=${BASEPREFIX}/${i}/share/config.site ./configure --prefix=/ --disable-ccache --disable-maintainer-mode --disable-dependency-tracking ${CONFIGFLAGS}
    make ${MAKEOPTS}
    make ${MAKEOPTS} -C src check-security
    make ${MAKEOPTS} -C src check-symbols
    make install-strip DESTDIR=${INSTALLPATH}

    make osx_volname
    make deploydir

    # Hack to work around differences in the behavior of native_cctools' codesign_allocate and Apple distributed codesign and codesign_allocate.
    # Specifically, the signature is created by appending it to the end of the binary and then updating the size for the section __LINKEDIT
    # The "vmsize" attribute of this section is rounded to 0x1000, 0x2000, or 0x4000 depending on the architecture. For some reason, this also happens
    # to differ between what we can build ourselves in native_cctools (which uses Apple's published source code) and what Apple distributes
    # as "Xcode command line tools". It appears that the Apple distributed tool rounds to 0x2000.
    #
    # Fortunately codesign_allocate will not reduce the "vmsize" attribute, and when the signature is appended, the difference in actual size and
    # "vmsize" will not be present in the final binary.
    #
    # Thus we can workaround this by calculating an overestimate of what the signature will be and then using codesign_allocate to preallocate
    # space for the code signature. Because the same codesign_allocate is used in this step, the rounding problem will not be present.
    # Since the space allocated for the signature should be larger than actually needed, the signing step will not reduce "vmsize" so we
    # won't have any problems there.
    #
    # From inspecting previous releases' code signatures, we find that the code signature primarily consists of SHA256 hashes of 4096 byte chunk
    # of the unsigned binary. There are a few other hashes of something. Then the signature itself, which is ~9kb. Then ~10kb of additional overhead.
    # We can thus produce an overestimate as follows: (((unsigned_size / 4096) + 1) * 32) + 51200. This gives us an expected number of SHA256 hashes
    # and how large they will be. By adding 50kb, we can include the signature, overhead, and still have room if Apple decides to cram more stuff
    # into the code signature.
    BINARY_RESULT="dist/Bitcoin-Qt.app/Contents/MacOS/Bitcoin-Qt"
    UNSIGNED_SIZE=$(stat -c %s ${BINARY_RESULT})
    SIG_SIZE_EST=$(((((UNSIGNED_SIZE / 4096) + 1) * 32) + 51200))
    ${CODESIGN_ALLOCATE} -i ${BINARY_RESULT} -a x86_64 ${SIG_SIZE_EST} -o ${BINARY_RESULT}

    # codesign_allocate appends 0's, and this causes codesign to error because it is expecting a properly formatted signature.
    # To avoid this problem, we attach a bogus signature. This signature was valid for some version, but it doesn't matter because it is invalid
    # for this version.
    BOGUS_SIG="contrib/macdeploy/a.sig"
    BOGUS_SIG_SIZE=$(stat -c %s ${BOGUS_SIG})
    ${CODESIGN_ALLOCATE} -i "${BINARY_RESULT}" -a x86_64 ${BOGUS_SIG_SIZE} -o "${BINARY_RESULT}"
    OFFSET=$(${PAGESTUFF} "${BINARY_RESULT}" -p | tail -2 | grep offset | sed 's/[^0-9]*//g')
    dd if="${BOGUS_SIG}" of="${BINARY_RESULT}" bs=1 seek=${OFFSET} count=${BOGUS_SIG_SIZE} 2>/dev/null

    mkdir -p unsigned-app-${i}
    cp osx_volname unsigned-app-${i}/
    cp contrib/macdeploy/detached-sig-apply.sh unsigned-app-${i}
    cp contrib/macdeploy/detached-sig-create.sh unsigned-app-${i}
    cp ${BASEPREFIX}/${i}/native/bin/dmg unsigned-app-${i}
    cp ${BASEPREFIX}/${i}/native/bin/${i}-codesign_allocate unsigned-app-${i}/codesign_allocate
    cp ${BASEPREFIX}/${i}/native/bin/${i}-pagestuff unsigned-app-${i}/pagestuff
    mv dist unsigned-app-${i}
    pushd unsigned-app-${i}
    find . | sort | tar --mtime="$REFERENCE_DATETIME" --no-recursion --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | gzip -9n > ${OUTDIR}/${DISTNAME}-osx-unsigned.tar.gz
    popd

    make deploy OSX_DMG="${OUTDIR}/${DISTNAME}-osx-unsigned.dmg"

    cd installed
    find . -name "lib*.la" -delete
    find . -name "lib*.a" -delete
    rm -rf ${DISTNAME}/lib/pkgconfig
    find ${DISTNAME} | sort | tar --mtime="$REFERENCE_DATETIME" --no-recursion --mode='u+rw,go+r-w,a+X' --owner=0 --group=0 -c -T - | gzip -9n > ${OUTDIR}/${DISTNAME}-${i}.tar.gz
    cd ../../
  done

  mv ${OUTDIR}/${DISTNAME}-x86_64-*.tar.gz ${OUTDIR}/${DISTNAME}-osx64.tar.gz
