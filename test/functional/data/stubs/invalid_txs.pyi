import abc
from typing import Any, Optional

basic_p2sh: Any

class BadTxTemplate(metaclass=abc.ABCMeta):
    __metaclass__: Any = ...
    reject_reason: Optional[str] = ...
    block_reject_reason: str = ...
    expect_disconnect: bool = ...
    valid_in_block: bool = ...
    spend_tx: Any = ...
    spend_avail: Any = ...
    valid_txin: Any = ...
    def __init__(self, *, spend_tx: Optional[Any] = ..., spend_block: Optional[Any] = ...) -> None: ...
    @abc.abstractmethod
    def get_tx(self, *args: Any, **kwargs: Any) -> Any: ...

class OutputMissing(BadTxTemplate):
    reject_reason: str = ...
    expect_disconnect: bool = ...
    def get_tx(self): ...

class InputMissing(BadTxTemplate):
    reject_reason: str = ...
    expect_disconnect: bool = ...
    def get_tx(self): ...

class SizeTooSmall(BadTxTemplate):
    reject_reason: str = ...
    expect_disconnect: bool = ...
    valid_in_block: bool = ...
    def get_tx(self): ...

class BadInputOutpointIndex(BadTxTemplate):
    reject_reason: Any = ...
    expect_disconnect: bool = ...
    def get_tx(self): ...

class DuplicateInput(BadTxTemplate):
    reject_reason: str = ...
    expect_disconnect: bool = ...
    def get_tx(self): ...

class NonexistentInput(BadTxTemplate):
    reject_reason: Any = ...
    expect_disconnect: bool = ...
    def get_tx(self): ...

class SpendTooMuch(BadTxTemplate):
    reject_reason: str = ...
    expect_disconnect: bool = ...
    def get_tx(self): ...

class CreateNegative(BadTxTemplate):
    reject_reason: str = ...
    expect_disconnect: bool = ...
    def get_tx(self): ...

class CreateTooLarge(BadTxTemplate):
    reject_reason: str = ...
    expect_disconnect: bool = ...
    def get_tx(self): ...

class CreateSumTooLarge(BadTxTemplate):
    reject_reason: str = ...
    expect_disconnect: bool = ...
    def get_tx(self): ...

class InvalidOPIFConstruction(BadTxTemplate):
    reject_reason: str = ...
    expect_disconnect: bool = ...
    valid_in_block: bool = ...
    def get_tx(self): ...

class TooManySigops(BadTxTemplate):
    reject_reason: str = ...
    block_reject_reason: str = ...
    expect_disconnect: bool = ...
    def get_tx(self): ...

def getDisabledOpcodeTemplate(opcode: Any): ...

DisabledOpcodeTemplates: Any

def iter_all_templates(): ...
