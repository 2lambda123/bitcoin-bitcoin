import enum
import unittest
from . import segwit_addr as segwit_addr
from .script import CScript as CScript, OP_0 as OP_0, hash160 as hash160, hash256 as hash256, sha256 as sha256
from .util import hex_str_to_bytes as hex_str_to_bytes
from test_framework.util import assert_equal as assert_equal
from typing import Any

ADDRESS_BCRT1_UNSPENDABLE: str
ADDRESS_BCRT1_UNSPENDABLE_DESCRIPTOR: str
ADDRESS_BCRT1_P2WSH_OP_TRUE: str

class AddressType(enum.Enum):
    bech32: str = ...
    p2sh_segwit: str = ...
    legacy: str = ...

chars: str

def byte_to_base58(b: Any, version: Any): ...
def base58_to_byte(s: Any, verify_checksum: bool = ...): ...
def keyhash_to_p2pkh(hash: Any, main: bool = ...): ...
def scripthash_to_p2sh(hash: Any, main: bool = ...): ...
def key_to_p2pkh(key: Any, main: bool = ...): ...
def script_to_p2sh(script: Any, main: bool = ...): ...
def key_to_p2sh_p2wpkh(key: Any, main: bool = ...): ...
def program_to_witness(version: Any, program: Any, main: bool = ...): ...
def script_to_p2wsh(script: Any, main: bool = ...): ...
def key_to_p2wpkh(key: Any, main: bool = ...): ...
def script_to_p2sh_p2wsh(script: Any, main: bool = ...): ...
def check_key(key: Any): ...
def check_script(script: Any): ...

class TestFrameworkScript(unittest.TestCase):
    def test_base58encodedecode(self) -> None: ...
