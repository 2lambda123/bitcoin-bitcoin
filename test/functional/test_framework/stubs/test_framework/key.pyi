from typing import Any

def modinv(a: Any, n: Any): ...
def jacobi_symbol(n: Any, k: Any): ...
def modsqrt(a: Any, p: Any): ...

class EllipticCurve:
    p: Any = ...
    a: Any = ...
    b: Any = ...
    def __init__(self, p: Any, a: Any, b: Any) -> None: ...
    def affine(self, p1: Any): ...
    def negate(self, p1: Any): ...
    def on_curve(self, p1: Any): ...
    def is_x_coord(self, x: Any): ...
    def lift_x(self, x: Any): ...
    def double(self, p1: Any): ...
    def add_mixed(self, p1: Any, p2: Any): ...
    def add(self, p1: Any, p2: Any): ...
    def mul(self, ps: Any): ...

SECP256K1: Any
SECP256K1_G: Any
SECP256K1_ORDER: int
SECP256K1_ORDER_HALF: Any

class ECPubKey:
    valid: bool = ...
    def __init__(self) -> None: ...
    p: Any = ...
    compressed: bool = ...
    def set(self, data: Any) -> None: ...
    @property
    def is_compressed(self): ...
    @property
    def is_valid(self): ...
    def get_bytes(self): ...
    def verify_ecdsa(self, sig: Any, msg: Any, low_s: bool = ...): ...

class ECKey:
    valid: bool = ...
    def __init__(self) -> None: ...
    secret: Any = ...
    compressed: Any = ...
    def set(self, secret: Any, compressed: Any) -> None: ...
    def generate(self, compressed: bool = ...) -> None: ...
    def get_bytes(self): ...
    @property
    def is_valid(self): ...
    @property
    def is_compressed(self): ...
    def get_pubkey(self): ...
    def sign_ecdsa(self, msg: Any, low_s: bool = ...): ...
