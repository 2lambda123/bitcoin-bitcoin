from collections import namedtuple
from test_framework.address import byte_to_base58 as byte_to_base58, key_to_p2pkh as key_to_p2pkh, key_to_p2sh_p2wpkh as key_to_p2sh_p2wpkh, key_to_p2wpkh as key_to_p2wpkh, script_to_p2sh as script_to_p2sh, script_to_p2sh_p2wsh as script_to_p2sh_p2wsh, script_to_p2wsh as script_to_p2wsh
from test_framework.key import ECKey as ECKey
from test_framework.script import CScript as CScript, OP_0 as OP_0, OP_2 as OP_2, OP_3 as OP_3, OP_CHECKMULTISIG as OP_CHECKMULTISIG, OP_CHECKSIG as OP_CHECKSIG, OP_DUP as OP_DUP, OP_EQUAL as OP_EQUAL, OP_EQUALVERIFY as OP_EQUALVERIFY, OP_HASH160 as OP_HASH160, hash160 as hash160, sha256 as sha256
from test_framework.util import hex_str_to_bytes as hex_str_to_bytes
from typing import Any

Key = namedtuple('Key', ['privkey', 'pubkey', 'p2pkh_script', 'p2pkh_addr', 'p2wpkh_script', 'p2wpkh_addr', 'p2sh_p2wpkh_script', 'p2sh_p2wpkh_redeem_script', 'p2sh_p2wpkh_addr'])

Multisig = namedtuple('Multisig', ['privkeys', 'pubkeys', 'p2sh_script', 'p2sh_addr', 'redeem_script', 'p2wsh_script', 'p2wsh_addr', 'p2sh_p2wsh_script', 'p2sh_p2wsh_addr'])

def get_key(node: Any): ...
def get_generate_key(): ...
def get_multisig(node: Any): ...
def test_address(node: Any, address: Any, **kwargs: Any) -> None: ...
def bytes_to_wif(b: Any, compressed: bool = ...): ...
def generate_wif_key(): ...
