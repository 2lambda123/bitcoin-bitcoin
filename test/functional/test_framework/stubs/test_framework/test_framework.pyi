from . import coverage as coverage
from .authproxy import JSONRPCException as JSONRPCException
from .mininode import NetworkThread as NetworkThread
from .test_node import TestNode as TestNode
from .util import MAX_NODES as MAX_NODES, PortSeed as PortSeed, assert_equal as assert_equal, check_json_precision as check_json_precision, connect_nodes as connect_nodes, disconnect_nodes as disconnect_nodes, get_datadir_path as get_datadir_path, initialize_datadir as initialize_datadir
from enum import Enum
from typing import Any, Optional

class TestStatus(Enum):
    PASSED: int = ...
    FAILED: int = ...
    SKIPPED: int = ...

TEST_EXIT_PASSED: int
TEST_EXIT_FAILED: int
TEST_EXIT_SKIPPED: int
TMPDIR_PREFIX: str

class SkipTest(Exception):
    message: Any = ...
    def __init__(self, message: Any) -> None: ...

class BitcoinTestMetaClass(type):
    def __new__(cls, clsname: Any, bases: Any, dct: Any): ...

class BitcoinTestFramework(metaclass=BitcoinTestMetaClass):
    chain: str = ...
    setup_clean_chain: bool = ...
    nodes: Any = ...
    network_thread: Any = ...
    rpc_timeout: int = ...
    supports_cli: bool = ...
    bind_to_localhost_only: bool = ...
    def __init__(self) -> None: ...
    success: Any = ...
    def main(self) -> None: ...
    options: Any = ...
    def parse_args(self) -> None: ...
    config: Any = ...
    def setup(self) -> None: ...
    def shutdown(self): ...
    def set_test_params(self) -> None: ...
    def add_options(self, parser: Any) -> None: ...
    def skip_test_if_missing_module(self) -> None: ...
    def setup_chain(self) -> None: ...
    def setup_network(self) -> None: ...
    def setup_nodes(self) -> None: ...
    def import_deterministic_coinbase_privkeys(self) -> None: ...
    def run_test(self) -> None: ...
    def add_nodes(self, num_nodes: int, extra_args: Any=..., *, rpchost: Any=..., binary: Any=..., binary_cli: Any=..., versions: Any=...) -> Any: ...
    def start_node(self, i: Any, *args: Any, **kwargs: Any) -> None: ...
    def start_nodes(self, extra_args: Optional[Any] = ..., *args: Any, **kwargs: Any) -> None: ...
    def stop_node(self, i: Any, expected_stderr: str = ..., wait: int = ...) -> None: ...
    def stop_nodes(self, wait: int = ...) -> None: ...
    def restart_node(self, i: Any, extra_args: Optional[Any] = ...) -> None: ...
    def wait_for_node_exit(self, i: Any, timeout: Any) -> None: ...
    def connect_nodes(self, a: Any, b: Any) -> None: ...
    def disconnect_nodes(self, a: Any, b: Any) -> None: ...
    def split_network(self) -> None: ...
    def join_network(self) -> None: ...
    def sync_blocks(self, nodes: Optional[Any] = ..., wait: int = ..., timeout: int = ...) -> None: ...
    def sync_mempools(self, nodes: Optional[Any] = ..., wait: int = ..., timeout: int = ..., flush_scheduler: bool = ...) -> None: ...
    def sync_all(self, nodes: Optional[Any] = ...) -> None: ...
    def skip_if_no_py3_zmq(self) -> None: ...
    def skip_if_no_bitcoind_zmq(self) -> None: ...
    def skip_if_no_wallet(self) -> None: ...
    def skip_if_no_wallet_tool(self) -> None: ...
    def skip_if_no_cli(self) -> None: ...
    def skip_if_no_previous_releases(self) -> None: ...
    def has_previous_releases(self): ...
    def is_cli_compiled(self): ...
    def is_wallet_compiled(self): ...
    def is_wallet_tool_compiled(self): ...
    def is_zmq_compiled(self): ...
