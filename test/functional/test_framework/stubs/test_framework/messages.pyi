from test_framework.siphash import siphash256 as siphash256
from test_framework.util import assert_equal as assert_equal, hex_str_to_bytes as hex_str_to_bytes
from typing import Any, Optional

MIN_VERSION_SUPPORTED: int
MY_VERSION: int
MY_SUBVERSION: bytes
MY_RELAY: int
MAX_LOCATOR_SZ: int
MAX_BLOCK_BASE_SIZE: int
MAX_BLOOM_FILTER_SIZE: int
MAX_BLOOM_HASH_FUNCS: int
COIN: int
MAX_MONEY: Any
BIP125_SEQUENCE_NUMBER: int
MAX_PROTOCOL_MESSAGE_LENGTH: int
MAX_HEADERS_RESULTS: int
MAX_INV_SIZE: int
NODE_NETWORK: Any
NODE_GETUTXO: Any
NODE_BLOOM: Any
NODE_WITNESS: Any
NODE_NETWORK_LIMITED: Any
MSG_TX: int
MSG_BLOCK: int
MSG_FILTERED_BLOCK: int
MSG_CMPCT_BLOCK: int
MSG_WITNESS_FLAG: Any
MSG_TYPE_MASK: Any
FILTER_TYPE_BASIC: int

def sha256(s: Any): ...
def hash256(s: Any): ...
def ser_compact_size(l: Any): ...
def deser_compact_size(f: Any): ...
def deser_string(f: Any): ...
def ser_string(s: Any): ...
def deser_uint256(f: Any): ...
def ser_uint256(u: Any): ...
def uint256_from_str(s: Any): ...
def uint256_from_compact(c: Any): ...
def deser_vector(f: Any, c: Any): ...
def ser_vector(l: Any, ser_function_name: Optional[Any] = ...): ...
def deser_uint256_vector(f: Any): ...
def ser_uint256_vector(l: Any): ...
def deser_string_vector(f: Any): ...
def ser_string_vector(l: Any): ...
def FromHex(obj: Any, hex_string: Any): ...
def ToHex(obj: Any): ...

class CAddress:
    time: int = ...
    nServices: int = ...
    pchReserved: Any = ...
    ip: str = ...
    port: int = ...
    def __init__(self) -> None: ...
    def deserialize(self, f: Any, *, with_time: bool = ...) -> None: ...
    def serialize(self, *, with_time: bool = ...): ...

class CInv:
    typemap: Any = ...
    type: Any = ...
    hash: Any = ...
    def __init__(self, t: int = ..., h: int = ...) -> None: ...
    def deserialize(self, f: Any) -> None: ...
    def serialize(self): ...

class CBlockLocator:
    nVersion: Any = ...
    vHave: Any = ...
    def __init__(self) -> None: ...
    def deserialize(self, f: Any) -> None: ...
    def serialize(self): ...

class COutPoint:
    hash: Any = ...
    n: Any = ...
    def __init__(self, hash: int = ..., n: int = ...) -> None: ...
    def deserialize(self, f: Any) -> None: ...
    def serialize(self): ...

class CTxIn:
    prevout: Any = ...
    scriptSig: Any = ...
    nSequence: Any = ...
    def __init__(self, outpoint: Optional[Any] = ..., scriptSig: bytes = ..., nSequence: int = ...) -> None: ...
    def deserialize(self, f: Any) -> None: ...
    def serialize(self): ...

class CTxOut:
    nValue: Any = ...
    scriptPubKey: Any = ...
    def __init__(self, nValue: int = ..., scriptPubKey: bytes = ...) -> None: ...
    def deserialize(self, f: Any) -> None: ...
    def serialize(self): ...

class CScriptWitness:
    stack: Any = ...
    def __init__(self) -> None: ...
    def is_null(self): ...

class CTxInWitness:
    scriptWitness: Any = ...
    def __init__(self) -> None: ...
    def deserialize(self, f: Any) -> None: ...
    def serialize(self): ...
    def is_null(self): ...

class CTxWitness:
    vtxinwit: Any = ...
    def __init__(self) -> None: ...
    def deserialize(self, f: Any) -> None: ...
    def serialize(self): ...
    def is_null(self): ...

class CTransaction:
    nVersion: int = ...
    vin: Any = ...
    vout: Any = ...
    wit: Any = ...
    nLockTime: int = ...
    sha256: Any = ...
    hash: Any = ...
    def __init__(self, tx: Optional[Any] = ...) -> None: ...
    def deserialize(self, f: Any) -> None: ...
    def serialize_without_witness(self): ...
    def serialize_with_witness(self): ...
    def serialize(self): ...
    def rehash(self): ...
    def calc_sha256(self, with_witness: bool = ...): ...
    def is_valid(self): ...

class CBlockHeader:
    nVersion: Any = ...
    hashPrevBlock: Any = ...
    hashMerkleRoot: Any = ...
    nTime: Any = ...
    nBits: Any = ...
    nNonce: Any = ...
    sha256: Any = ...
    hash: Any = ...
    def __init__(self, header: Optional[Any] = ...) -> None: ...
    def set_null(self) -> None: ...
    def deserialize(self, f: Any) -> None: ...
    def serialize(self): ...
    def calc_sha256(self) -> None: ...
    def rehash(self): ...

BLOCK_HEADER_SIZE: Any

class CBlock(CBlockHeader):
    vtx: Any = ...
    def __init__(self, header: Optional[Any] = ...) -> None: ...
    def deserialize(self, f: Any) -> None: ...
    def serialize(self, with_witness: bool = ...): ...
    @classmethod
    def get_merkle_root(cls, hashes: Any): ...
    def calc_merkle_root(self): ...
    def calc_witness_merkle_root(self): ...
    def is_valid(self): ...
    def solve(self) -> None: ...

class PrefilledTransaction:
    index: Any = ...
    tx: Any = ...
    def __init__(self, index: int = ..., tx: Optional[Any] = ...) -> None: ...
    def deserialize(self, f: Any) -> None: ...
    def serialize(self, with_witness: bool = ...): ...
    def serialize_without_witness(self): ...
    def serialize_with_witness(self): ...

class P2PHeaderAndShortIDs:
    header: Any = ...
    nonce: int = ...
    shortids_length: int = ...
    shortids: Any = ...
    prefilled_txn_length: int = ...
    prefilled_txn: Any = ...
    def __init__(self) -> None: ...
    def deserialize(self, f: Any) -> None: ...
    def serialize(self, with_witness: bool = ...): ...

class P2PHeaderAndShortWitnessIDs(P2PHeaderAndShortIDs):
    def serialize(self): ...

def calculate_shortid(k0: Any, k1: Any, tx_hash: Any): ...

class HeaderAndShortIDs:
    header: Any = ...
    nonce: int = ...
    shortids: Any = ...
    prefilled_txn: Any = ...
    use_witness: bool = ...
    def __init__(self, p2pheaders_and_shortids: Optional[Any] = ...) -> None: ...
    def to_p2p(self): ...
    def get_siphash_keys(self): ...
    def initialize_from_block(self, block: Any, nonce: int = ..., prefill_list: Optional[Any] = ..., use_witness: bool = ...) -> None: ...

class BlockTransactionsRequest:
    blockhash: Any = ...
    indexes: Any = ...
    def __init__(self, blockhash: int = ..., indexes: Optional[Any] = ...) -> None: ...
    def deserialize(self, f: Any) -> None: ...
    def serialize(self): ...
    def from_absolute(self, absolute_indexes: Any) -> None: ...
    def to_absolute(self): ...

class BlockTransactions:
    blockhash: Any = ...
    transactions: Any = ...
    def __init__(self, blockhash: int = ..., transactions: Optional[Any] = ...) -> None: ...
    def deserialize(self, f: Any) -> None: ...
    def serialize(self, with_witness: bool = ...): ...

class CPartialMerkleTree:
    nTransactions: int = ...
    vHash: Any = ...
    vBits: Any = ...
    def __init__(self) -> None: ...
    def deserialize(self, f: Any) -> None: ...
    def serialize(self): ...

class CMerkleBlock:
    header: Any = ...
    txn: Any = ...
    def __init__(self) -> None: ...
    def deserialize(self, f: Any) -> None: ...
    def serialize(self): ...

class msg_version:
    msgtype: bytes = ...
    nVersion: Any = ...
    nServices: Any = ...
    nTime: Any = ...
    addrTo: Any = ...
    addrFrom: Any = ...
    nNonce: Any = ...
    strSubVer: Any = ...
    nStartingHeight: int = ...
    nRelay: Any = ...
    def __init__(self) -> None: ...
    def deserialize(self, f: Any) -> None: ...
    def serialize(self): ...

class msg_verack:
    msgtype: bytes = ...
    def __init__(self) -> None: ...
    def deserialize(self, f: Any) -> None: ...
    def serialize(self): ...

class msg_addr:
    msgtype: bytes = ...
    addrs: Any = ...
    def __init__(self) -> None: ...
    def deserialize(self, f: Any) -> None: ...
    def serialize(self): ...

class msg_inv:
    msgtype: bytes = ...
    inv: Any = ...
    def __init__(self, inv: Optional[Any] = ...) -> None: ...
    def deserialize(self, f: Any) -> None: ...
    def serialize(self): ...

class msg_getdata:
    msgtype: bytes = ...
    inv: Any = ...
    def __init__(self, inv: Optional[Any] = ...) -> None: ...
    def deserialize(self, f: Any) -> None: ...
    def serialize(self): ...

class msg_getblocks:
    msgtype: bytes = ...
    locator: Any = ...
    hashstop: int = ...
    def __init__(self) -> None: ...
    def deserialize(self, f: Any) -> None: ...
    def serialize(self): ...

class msg_tx:
    msgtype: bytes = ...
    tx: Any = ...
    def __init__(self, tx: Any = ...) -> None: ...
    def deserialize(self, f: Any) -> None: ...
    def serialize(self): ...

class msg_no_witness_tx(msg_tx):
    def serialize(self): ...

class msg_block:
    msgtype: bytes = ...
    block: Any = ...
    def __init__(self, block: Optional[Any] = ...) -> None: ...
    def deserialize(self, f: Any) -> None: ...
    def serialize(self): ...

class msg_generic:
    msgtype: Any = ...
    data: Any = ...
    def __init__(self, msgtype: Any, data: Optional[Any] = ...) -> None: ...
    def serialize(self): ...

class msg_no_witness_block(msg_block):
    def serialize(self): ...

class msg_getaddr:
    msgtype: bytes = ...
    def __init__(self) -> None: ...
    def deserialize(self, f: Any) -> None: ...
    def serialize(self): ...

class msg_ping:
    msgtype: bytes = ...
    nonce: Any = ...
    def __init__(self, nonce: int = ...) -> None: ...
    def deserialize(self, f: Any) -> None: ...
    def serialize(self): ...

class msg_pong:
    msgtype: bytes = ...
    nonce: Any = ...
    def __init__(self, nonce: int = ...) -> None: ...
    def deserialize(self, f: Any) -> None: ...
    def serialize(self): ...

class msg_mempool:
    msgtype: bytes = ...
    def __init__(self) -> None: ...
    def deserialize(self, f: Any) -> None: ...
    def serialize(self): ...

class msg_notfound:
    msgtype: bytes = ...
    vec: Any = ...
    def __init__(self, vec: Optional[Any] = ...) -> None: ...
    def deserialize(self, f: Any) -> None: ...
    def serialize(self): ...

class msg_sendheaders:
    msgtype: bytes = ...
    def __init__(self) -> None: ...
    def deserialize(self, f: Any) -> None: ...
    def serialize(self): ...

class msg_getheaders:
    msgtype: bytes = ...
    locator: Any = ...
    hashstop: int = ...
    def __init__(self) -> None: ...
    def deserialize(self, f: Any) -> None: ...
    def serialize(self): ...

class msg_headers:
    msgtype: bytes = ...
    headers: Any = ...
    def __init__(self, headers: Optional[Any] = ...) -> None: ...
    def deserialize(self, f: Any) -> None: ...
    def serialize(self): ...

class msg_merkleblock:
    msgtype: bytes = ...
    merkleblock: Any = ...
    def __init__(self, merkleblock: Optional[Any] = ...) -> None: ...
    def deserialize(self, f: Any) -> None: ...
    def serialize(self): ...

class msg_filterload:
    msgtype: bytes = ...
    data: Any = ...
    nHashFuncs: Any = ...
    nTweak: Any = ...
    nFlags: Any = ...
    def __init__(self, data: bytes = ..., nHashFuncs: int = ..., nTweak: int = ..., nFlags: int = ...) -> None: ...
    def deserialize(self, f: Any) -> None: ...
    def serialize(self): ...

class msg_filteradd:
    msgtype: bytes = ...
    data: Any = ...
    def __init__(self, data: Any) -> None: ...
    def deserialize(self, f: Any) -> None: ...
    def serialize(self): ...

class msg_filterclear:
    msgtype: bytes = ...
    def __init__(self) -> None: ...
    def deserialize(self, f: Any) -> None: ...
    def serialize(self): ...

class msg_feefilter:
    msgtype: bytes = ...
    feerate: Any = ...
    def __init__(self, feerate: int = ...) -> None: ...
    def deserialize(self, f: Any) -> None: ...
    def serialize(self): ...

class msg_sendcmpct:
    msgtype: bytes = ...
    announce: bool = ...
    version: int = ...
    def __init__(self) -> None: ...
    def deserialize(self, f: Any) -> None: ...
    def serialize(self): ...

class msg_cmpctblock:
    msgtype: bytes = ...
    header_and_shortids: Any = ...
    def __init__(self, header_and_shortids: Optional[Any] = ...) -> None: ...
    def deserialize(self, f: Any) -> None: ...
    def serialize(self): ...

class msg_getblocktxn:
    msgtype: bytes = ...
    block_txn_request: Any = ...
    def __init__(self) -> None: ...
    def deserialize(self, f: Any) -> None: ...
    def serialize(self): ...

class msg_blocktxn:
    msgtype: bytes = ...
    block_transactions: Any = ...
    def __init__(self) -> None: ...
    def deserialize(self, f: Any) -> None: ...
    def serialize(self): ...

class msg_no_witness_blocktxn(msg_blocktxn):
    def serialize(self): ...

class msg_getcfilters:
    msgtype: bytes = ...
    filter_type: Any = ...
    start_height: Any = ...
    stop_hash: Any = ...
    def __init__(self, filter_type: Any, start_height: Any, stop_hash: Any) -> None: ...
    def deserialize(self, f: Any) -> None: ...
    def serialize(self): ...

class msg_cfilter:
    msgtype: bytes = ...
    filter_type: Any = ...
    block_hash: Any = ...
    filter_data: Any = ...
    def __init__(self, filter_type: Optional[Any] = ..., block_hash: Optional[Any] = ..., filter_data: Optional[Any] = ...) -> None: ...
    def deserialize(self, f: Any) -> None: ...
    def serialize(self): ...

class msg_getcfheaders:
    msgtype: bytes = ...
    filter_type: Any = ...
    start_height: Any = ...
    stop_hash: Any = ...
    def __init__(self, filter_type: Any, start_height: Any, stop_hash: Any) -> None: ...
    def deserialize(self, f: Any) -> None: ...
    def serialize(self): ...

class msg_cfheaders:
    msgtype: bytes = ...
    filter_type: Any = ...
    stop_hash: Any = ...
    prev_header: Any = ...
    hashes: Any = ...
    def __init__(self, filter_type: Optional[Any] = ..., stop_hash: Optional[Any] = ..., prev_header: Optional[Any] = ..., hashes: Optional[Any] = ...) -> None: ...
    def deserialize(self, f: Any) -> None: ...
    def serialize(self): ...

class msg_getcfcheckpt:
    msgtype: bytes = ...
    filter_type: Any = ...
    stop_hash: Any = ...
    def __init__(self, filter_type: Any, stop_hash: Any) -> None: ...
    def deserialize(self, f: Any) -> None: ...
    def serialize(self): ...

class msg_cfcheckpt:
    msgtype: bytes = ...
    filter_type: Any = ...
    stop_hash: Any = ...
    headers: Any = ...
    def __init__(self, filter_type: Optional[Any] = ..., stop_hash: Optional[Any] = ..., headers: Optional[Any] = ...) -> None: ...
    def deserialize(self, f: Any) -> None: ...
    def serialize(self): ...
