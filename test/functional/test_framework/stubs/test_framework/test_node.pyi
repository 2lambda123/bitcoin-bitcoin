from .authproxy import JSONRPCException as JSONRPCException
from .descriptors import descsum_create as descsum_create
from .messages import MY_SUBVERSION as MY_SUBVERSION
from .util import EncodeDecimal as EncodeDecimal, MAX_NODES as MAX_NODES, append_config as append_config, delete_cookie_file as delete_cookie_file, get_auth_cookie as get_auth_cookie, get_rpc_proxy as get_rpc_proxy, p2p_port as p2p_port, rpc_url as rpc_url, wait_until as wait_until
from collections import namedtuple
from enum import Enum
from typing import Any, Optional

BITCOIND_PROC_WAIT_TIMEOUT: int

class FailedToStartError(Exception): ...

class ErrorMatch(Enum):
    FULL_TEXT: int = ...
    FULL_REGEX: int = ...
    PARTIAL_REGEX: int = ...

class TestNode:
    index: Any = ...
    datadir: Any = ...
    bitcoinconf: Any = ...
    stdout_dir: Any = ...
    stderr_dir: Any = ...
    chain: Any = ...
    rpchost: Any = ...
    rpc_timeout: Any = ...
    binary: Any = ...
    coverage_dir: Any = ...
    cwd: Any = ...
    descriptors: Any = ...
    extra_args: Any = ...
    version: Any = ...
    args: Any = ...
    cli: Any = ...
    use_cli: Any = ...
    start_perf: Any = ...
    running: bool = ...
    process: Any = ...
    rpc_connected: bool = ...
    rpc: Any = ...
    url: Any = ...
    log: Any = ...
    cleanup_on_exit: bool = ...
    perf_subprocesses: Any = ...
    p2ps: Any = ...
    timeout_factor: Any = ...
    def __init__(self, i: Any, datadir: Any, chain: Any, rpchost: Any, timewait: Any, timeout_factor: Any, bitcoind: Any, bitcoin_cli: Any, coverage_dir: Any, cwd: Any, *, extra_conf: Optional[Any] = ..., extra_args: Optional[Any] = ..., use_cli: bool = ..., start_perf: bool = ..., use_valgrind: bool = ..., version: Optional[Any] = ..., descriptors: bool = ...) -> None: ...

    AddressKeyPair = namedtuple('AddressKeyPair', ['address', 'key'])
    PRIV_KEYS: Any = ...
    def get_deterministic_priv_key(self): ...
    def __del__(self) -> None: ...
    def __getattr__(self, name: Any): ...
    stderr: Any = ...
    stdout: Any = ...
    def start(self, extra_args: Optional[Any] = ..., *, cwd: Optional[Any] = ..., stdout: Optional[Any] = ..., stderr: Optional[Any] = ..., **kwargs: Any) -> None: ...
    def wait_for_rpc_connection(self): ...
    def wait_for_cookie_credentials(self) -> None: ...
    def generate(self, nblocks: Any, maxtries: int = ...): ...
    def get_wallet_rpc(self, wallet_name: Any): ...
    def version_is_at_least(self, ver: Any): ...
    def stop_node(self, expected_stderr: str = ..., wait: int = ...) -> None: ...
    def is_node_stopped(self): ...
    def wait_until_stopped(self, timeout: Any = ...) -> None: ...
    def assert_debug_log(self, expected_msgs: Any, unexpected_msgs: Optional[Any] = ..., timeout: int = ...) -> None: ...
    def profile_with_perf(self, profile_name: Any) -> None: ...
    def assert_start_raises_init_error(self, extra_args: Optional[Any] = ..., expected_msg: Optional[Any] = ..., match: Any = ..., *args: Any, **kwargs: Any) -> None: ...
    def add_p2p_connection(self, p2p_conn: Any, *, wait_for_verack: bool = ..., **kwargs: Any): ...
    @property
    def p2p(self): ...
    def num_connected_mininodes(self): ...
    def disconnect_p2ps(self): ...

class TestNodeCLIAttr:
    cli: Any = ...
    command: Any = ...
    def __init__(self, cli: Any, command: Any) -> None: ...
    def __call__(self, *args: Any, **kwargs: Any): ...
    def get_request(self, *args: Any, **kwargs: Any): ...

def arg_to_cli(arg: Any): ...

class TestNodeCLI:
    options: Any = ...
    binary: Any = ...
    datadir: Any = ...
    input: Any = ...
    log: Any = ...
    def __init__(self, binary: Any, datadir: Any) -> None: ...
    def __call__(self, *options: Any, input: Optional[Any] = ...): ...
    def __getattr__(self, command: Any): ...
    def batch(self, requests: Any): ...
    def send_cli(self, command: Optional[Any] = ..., *args: Any, **kwargs: Any): ...

class RPCOverloadWrapper:
    rpc: Any = ...
    is_cli: Any = ...
    descriptors: Any = ...
    def __init__(self, rpc: Any, cli: bool = ..., descriptors: bool = ...) -> None: ...
    def __getattr__(self, name: Any): ...
    def createwallet(self, wallet_name: Any, disable_private_keys: Optional[Any] = ..., blank: Optional[Any] = ..., passphrase: str = ..., avoid_reuse: Optional[Any] = ..., descriptors: Optional[Any] = ...): ...
    def importprivkey(self, privkey: Any, label: Optional[Any] = ..., rescan: Optional[Any] = ...): ...
    def addmultisigaddress(self, nrequired: Any, keys: Any, label: Optional[Any] = ..., address_type: Optional[Any] = ...): ...
    def importpubkey(self, pubkey: Any, label: Optional[Any] = ..., rescan: Optional[Any] = ...): ...
    def importaddress(self, address: Any, label: Optional[Any] = ..., rescan: Optional[Any] = ..., p2sh: Optional[Any] = ...): ...
