.TH BITCOIND "1" "January 2018" "bitcoind v0.16.99.0" "User Commands"
.SH NAME
bitcoind \- manual page for bitcoind v0.16.99.0
.SH DESCRIPTION
Bitcoin Core Daemon version v0.16.99.0
.SS "Usage:"
.TP
bitcoind [options]
Start Bitcoin Core Daemon
.SH OPTIONS
.IP \-?
Print this help message and exit
.IP \fB\-version\fR
Print version and exit
.IP \fB\-alertnotify=\fR<cmd>
Execute command when a relevant alert is received or we see a really
long fork (%s in cmd is replaced by message)
.IP \fB\-assumevalid=\fR<hex>
If this block is in the chain assume that it and its ancestors are valid
and potentially skip their script verification (0 to verify all,
default:
0000000000000000005214481d2d96f898e3d5416e43359c145944a909d242e0,
testnet:
0000000002e9e7b00e1f6dc5123a04aad68dd0f0968d8c7aa45f6640795c37b1)
.IP \fB\-blocknotify=\fR<cmd>
Execute command when the best block changes (%s in cmd is replaced by
block hash)
.IP \fB\-blockreconstructionextratxn=\fR<n>
Extra transactions to keep in memory for compact block reconstructions (default: 100)
.IP \fB\-blocksdir=\fR<dir>
Specify blocks directory (default: <datadir>/blocks)
.IP \fB\-conf=\fR<file>
Specify configuration file (default: bitcoin.conf)
.IP \fB\-daemon\fR
Run in the background as a daemon and accept commands
.IP \fB\-datadir=\fR<dir>
Specify data directory
.IP \fB\-dbcache=\fR<n>
Set database cache size in megabytes (4 to 16384, default: 450)
.IP \fB\-debuglogfile=\fR<file>
Specify location of debug log file. Relative paths will be prefixed by a net-specific datadir location. (default: debug.log)
.IP \fB\-loadblock=\fR<file>
Imports blocks from external blk000??.dat file on startup
.IP \fB\-maxmempool=\fR<n>
Keep the transaction memory pool below <n> megabytes (default: 300)
.IP \fB\-maxorphantx=\fR<n>
Keep at most <n> unconnectable transactions in memory (default: 100)
.IP \fB\-mempoolexpiry=\fR<n>
Do not keep transactions in the mempool longer than <n> hours (default:
336)
.IP \fB\-par=\fR<n>
Set the number of script verification threads (\fB\-6\fR to 16, 0 = auto, <0 =
leave that many cores free, default: 0)
.IP \fB\-persistmempool\fR
Whether to save the mempool on shutdown and load on restart (default: 1)
.IP \fB\-pid=\fR<file>
Specify pid file (default: bitcoind.pid)
.IP \fB\-prune=\fR<n>
Reduce storage requirements by enabling pruning (deleting) of old
blocks. This allows the pruneblockchain RPC to be called to
delete specific blocks, and enables automatic pruning of old
blocks if a target size in MiB is provided. This mode is
incompatible with \fB\-txindex\fR and \fB\-rescan\fR. Warning: Reverting this
setting requires re\-downloading the entire blockchain. (default:
0 = disable pruning blocks, 1 = allow manual pruning via RPC,
>550 = automatically prune block files to stay under the
specified target size in MiB)
.IP \fB\-reindex\fR
Rebuild chain state and block index from the blk*.dat files on disk
.IP \fB\-reindex\-chainstate\fR
Rebuild chain state from the currently indexed blocks
.IP \fB\-sysperms\fR
Create new files with system default permissions, instead of umask 077
(only effective with disabled wallet functionality)
.IP \fB\-txindex\fR
Maintain a full transaction index, used by the getrawtransaction rpc
call (default: 0)
.PP
Connection options:
.IP \fB\-addnode=\fR<ip>
Add a node to connect to and attempt to keep the connection open (see
the `addnode` RPC command help for more info)
.IP \fB\-banscore=\fR<n>
Threshold for disconnecting misbehaving peers (default: 100)
.IP \fB\-bantime=\fR<n>
Number of seconds to keep misbehaving peers from reconnecting (default:
86400)
.IP \fB\-bind=\fR<addr>
Bind to given address and always listen on it. Use [host]:port notation
for IPv6
.IP \fB\-connect=\fR<ip>
Connect only to the specified node(s); \fB\-connect\fR=\fI\,0\/\fR disables automatic
connections (the rules for this peer are the same as for
\fB\-addnode\fR)
.IP \fB\-discover\fR
Discover own IP addresses (default: 1 when listening and no \fB\-externalip\fR
or \fB\-proxy\fR)
.IP \fB\-dns\fR
Allow DNS lookups for \fB\-addnode\fR, \fB\-seednode\fR and \fB\-connect\fR (default: 1)
.IP \fB\-dnsseed\fR
Query for peer addresses via DNS lookup, if low on addresses (default: 1
unless \fB\-connect\fR used)
.IP \fB\-externalip=\fR<ip>
Specify your own public address
.IP \fB\-forcednsseed\fR
Always query for peer addresses via DNS lookup (default: 0)
.IP \fB\-listen\fR
Accept connections from outside (default: 1 if no \fB\-proxy\fR or \fB\-connect\fR)
.IP \fB\-listenonion\fR
Automatically create Tor hidden service (default: 1)
.IP \fB\-maxconnections=\fR<n>
Maintain at most <n> connections to peers (default: 125)
.IP \fB\-maxreceivebuffer=\fR<n>
Maximum per\-connection receive buffer, <n>*1000 bytes (default: 5000)
.IP \fB\-maxsendbuffer=\fR<n>
Maximum per\-connection send buffer, <n>*1000 bytes (default: 1000)
.IP \fB\-maxtimeadjustment\fR
Maximum allowed median peer time offset adjustment. Local perspective of
time may be influenced by peers forward or backward by this
amount. (default: 4200 seconds)
.IP \fB\-maxuploadtarget=\fR<n>
Tries to keep outbound traffic under the given target (in MiB per 24h),
0 = no limit (default: 0)
.IP \fB\-onion=\fR<ip:port>
Use separate SOCKS5 proxy to reach peers via Tor hidden services
(default: \fB\-proxy\fR)
.IP \fB\-onlynet=\fR<net>
Only connect to nodes in network <net> (ipv4, ipv6 or onion)
.IP \fB\-peerbloomfilters\fR
Support filtering of blocks and transaction with bloom filters (default:
1)
.IP \fB\-permitbaremultisig\fR
Relay non\-P2SH multisig (default: 1)
.IP \fB\-port=\fR<port>
Listen for connections on <port> (default: 8333 or testnet: 18333)
.IP \fB\-proxy=\fR<ip:port>
Connect through SOCKS5 proxy
.IP \fB\-proxyrandomize\fR
Randomize credentials for every proxy connection. This enables Tor
stream isolation (default: 1)
.IP \fB\-seednode=\fR<ip>
Connect to a node to retrieve peer addresses, and disconnect
.IP \fB\-timeout=\fR<n>
Specify connection timeout in milliseconds (minimum: 1, default: 5000)
.IP \fB\-torcontrol=\fR<ip>:<port>
Tor control port to use if onion listening enabled (default:
127.0.0.1:9051)
.IP \fB\-torpassword=\fR<pass>
Tor control port password (default: empty)
.IP \fB\-whitebind=\fR<addr>
Bind to given address and whitelist peers connecting to it. Use
[host]:port notation for IPv6
.IP \fB\-whitelist=\fR<IP address or network>
Whitelist peers connecting from the given IP address (e.g. 1.2.3.4) or
CIDR notated network (e.g. 1.2.3.0/24). Can be specified multiple
times. Whitelisted peers cannot be DoS banned and their
transactions are always relayed, even if they are already in the
mempool, useful e.g. for a gateway
.PP
Wallet options:
.IP \fB\-addresstype\fR
What type of addresses to use ("legacy", "p2sh\-segwit", or "bech32",
default: "p2sh\-segwit")
.IP \fB\-changetype\fR
What type of change to use ("legacy", "p2sh\-segwit", or "bech32").
Default is same as \fB\-addresstype\fR, except when
\fB\-addresstype\fR=\fI\,p2sh\-segwit\/\fR a native segwit output is used when
sending to a native segwit address)
.IP \fB\-disablewallet\fR
Do not load the wallet and disable wallet RPC calls
.IP \fB\-discardfee=\fR<amt>
The fee rate (in BTC/kB) that indicates your tolerance for discarding
change by adding it to the fee (default: 0.0001). Note: An output
is discarded if it is dust at this rate, but we will always
discard up to the dust relay fee and a discard fee above that is
limited by the fee estimate for the longest target
.IP \fB\-fallbackfee=\fR<amt>
A fee rate (in BTC/kB) that will be used when fee estimation has
insufficient data (default: 0.0002)
.IP \fB\-keypool=\fR<n>
Set key pool size to <n> (default: 1000)
.IP \fB\-mintxfee=\fR<amt>
Fees (in BTC/kB) smaller than this are considered zero fee for
transaction creation (default: 0.00001)
.IP \fB\-paytxfee=\fR<amt>
Fee (in BTC/kB) to add to transactions you send (default: 0.00)
.IP \fB\-rescan\fR
Rescan the block chain for missing wallet transactions on startup
.IP \fB\-salvagewallet\fR
Attempt to recover private keys from a corrupt wallet on startup
.IP \fB\-spendzeroconfchange\fR
Spend unconfirmed change when sending transactions (default: 1)
.IP \fB\-txconfirmtarget=\fR<n>
If paytxfee is not set, include enough fee so transactions begin
confirmation on average within n blocks (default: 6)
.IP \fB\-upgradewallet\fR
Upgrade wallet to latest format on startup
.IP \fB\-wallet=\fR<file>
Specify wallet database path. Can be specified multiple times to load
multiple wallets. Path is interpreted relative to <walletdir> if
it is not absolute, and will be created if it does not exist (as
a directory containing a wallet.dat file and log files). For
backwards compatibility this will also accept names of existing
data files in <walletdir>.)
.IP \fB\-walletbroadcast\fR
Make the wallet broadcast transactions (default: 1)
.IP \fB\-walletdir=\fR<dir>
Specify directory to hold wallets (default: <datadir>/wallets if it
exists, otherwise <datadir>)
.IP \fB\-walletnotify=\fR<cmd>
Execute command when a wallet transaction changes (%s in cmd is replaced
by TxID)
.IP \fB\-walletrbf\fR
Send transactions with full\-RBF opt\-in enabled (RPC only, default: 0)
.IP \fB\-zapwallettxes=\fR<mode>
Delete all wallet transactions and only recover those parts of the
blockchain through \fB\-rescan\fR on startup (1 = keep tx meta data e.g.
account owner and payment request information, 2 = drop tx meta
data)
.PP
ZeroMQ notification options:
.IP \fB\-zmqpubhashblock=\fR<address>
Enable publish hash block in <address>
.IP \fB\-zmqpubhashtx=\fR<address>
Enable publish hash transaction in <address>
.IP \fB\-zmqpubrawblock=\fR<address>
Enable publish raw block in <address>
.IP \fB\-zmqpubrawtx=\fR<address>
Enable publish raw transaction in <address>
.PP
Debugging/Testing options:
.IP \fB\-debug=\fR<category>
Output debugging information (default: 0, supplying <category> is
optional). If <category> is not supplied or if <category> = 1,
output all debugging information. <category> can be: net, tor,
mempool, http, bench, zmq, db, rpc, estimatefee, addrman,
selectcoins, reindex, cmpctblock, rand, prune, proxy, mempoolrej,
libevent, coindb, qt, leveldb.
.IP \fB\-debugexclude=\fR<category>
Exclude debugging information for a category. Can be used in conjunction
with \fB\-debug\fR=\fI\,1\/\fR to output debug logs for all categories except one
or more specified categories.
.IP \fB\-help\-debug\fR
Show all debugging options (usage: \fB\-\-help\fR \fB\-help\-debug\fR)
.IP \fB\-logips\fR
Include IP addresses in debug output (default: 0)
.IP \fB\-logtimestamps\fR
Prepend debug output with timestamp (default: 1)
.IP \fB\-maxtxfee=\fR<amt>
Maximum total fees (in BTC) to use in a single wallet transaction or raw
transaction; setting this too low may abort large transactions
(default: 0.10)
.IP \fB\-printtoconsole\fR
Send trace/debug info to console instead of debug.log file
.IP \fB\-shrinkdebugfile\fR
Shrink debug.log file on client startup (default: 1 when no \fB\-debug\fR)
.IP \fB\-uacomment=\fR<cmt>
Append comment to the user agent string
.PP
Chain selection options:
.IP \fB\-testnet\fR
Use the test chain
.PP
Node relay options:
.IP \fB\-bytespersigop\fR
Equivalent bytes per sigop in transactions for relay and mining
(default: 20)
.IP \fB\-datacarrier\fR
Relay and mine data carrier transactions (default: 1)
.IP \fB\-datacarriersize\fR
Maximum size of data in data carrier transactions we relay and mine
(default: 83)
.IP \fB\-mempoolreplacement\fR
Enable transaction replacement in the memory pool (default: 1)
.IP \fB\-minrelaytxfee=\fR<amt>
Fees (in BTC/kB) smaller than this are considered zero fee for relaying,
mining and transaction creation (default: 0.00001)
.IP \fB\-whitelistforcerelay\fR
Force relay of transactions from whitelisted peers even if they violate
local relay policy (default: 1)
.IP \fB\-whitelistrelay\fR
Accept relayed transactions received from whitelisted peers even when
not relaying transactions (default: 1)
.PP
Block creation options:
.IP \fB\-blockmaxweight=\fR<n>
Set maximum BIP141 block weight (default: 3996000)
.IP \fB\-blockmintxfee=\fR<amt>
Set lowest fee rate (in BTC/kB) for transactions to be included in block
creation. (default: 0.00001)
.PP
RPC server options:
.IP \fB\-rest\fR
Accept public REST requests (default: 0)
.IP \fB\-rpcallowip=\fR<ip>
Allow JSON\-RPC connections from specified source. Valid for <ip> are a
single IP (e.g. 1.2.3.4), a network/netmask (e.g.
1.2.3.4/255.255.255.0) or a network/CIDR (e.g. 1.2.3.4/24). This
option can be specified multiple times
.IP \fB\-rpcauth=\fR<userpw>
Username and hashed password for JSON\-RPC connections. The field
<userpw> comes in the format: <USERNAME>:<SALT>$<HASH>. A
canonical python script is included in share/rpcuser. The client
then connects normally using the
rpcuser=<USERNAME>/rpcpassword=<PASSWORD> pair of arguments. This
option can be specified multiple times
.IP \fB\-rpcbind=\fR<addr>[:port]
Bind to given address to listen for JSON\-RPC connections. This option is
ignored unless \fB\-rpcallowip\fR is also passed. Port is optional and
overrides \fB\-rpcport\fR. Use [host]:port notation for IPv6. This
option can be specified multiple times (default: 127.0.0.1 and
::1 i.e., localhost, or if \fB\-rpcallowip\fR has been specified,
0.0.0.0 and :: i.e., all addresses)
.IP \fB\-rpccookiefile=\fR<loc>
Location of the auth cookie (default: data dir)
.IP \fB\-rpcpassword=\fR<pw>
Password for JSON\-RPC connections
.IP \fB\-rpcport=\fR<port>
Listen for JSON\-RPC connections on <port> (default: 8332 or testnet:
18332)
.IP \fB\-rpcserialversion\fR
Sets the serialization of raw transaction or block hex returned in
non\-verbose mode, non\-segwit(0) or segwit(1) (default: 1)
.IP \fB\-rpcthreads=\fR<n>
Set the number of threads to service RPC calls (default: 4)
.IP \fB\-rpcuser=\fR<user>
Username for JSON\-RPC connections
.IP \fB\-server\fR
Accept command line and JSON\-RPC commands
.SH COPYRIGHT
Copyright (C) 2009-2018 The Bitcoin Core developers

Please contribute if you find Bitcoin Core useful. Visit
<https://bitcoincore.org> for further information about the software.
The source code is available from <https://github.com/bitcoin/bitcoin>.

This is experimental software.
Distributed under the MIT software license, see the accompanying file COPYING
or <https://opensource.org/licenses/MIT>

This product includes software developed by the OpenSSL Project for use in the
OpenSSL Toolkit <https://www.openssl.org> and cryptographic software written by
Eric Young and UPnP software written by Thomas Bernard.
